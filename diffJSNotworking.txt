[1mdiff --git a/app.py b/app.py[m
[1mindex 927cffb..6205817 100644[m
[1m--- a/app.py[m
[1m+++ b/app.py[m
[36m@@ -18,8 +18,13 @@[m [mapp = Flask(__name__)[m
 app.jinja_env.globals['wiki_version'] = '1.0.0'[m
 app.jinja_env.globals['project_status'] = 'development'[m
 [m
[32m+[m
[32m+[m[32m# RELOAD APP WHEN TEMPLATE CHANGES[m
 app.config["TEMPLATES_AUTO_RELOAD"] = True  [m
 [m
[32m+[m[32m# UTF-8 in JSON Responses.[m
[32m+[m[32mapp.config['JSON_AS_ASCII'] = False[m
[32m+[m
 # Configure session to use filesystem (instead of signed cookies) as per pset9. Still trying to understand how it works[m
 # Why SESSION_PERMANENT = False if I can set a lifetime for a permanent session?[m
 [m
[36m@@ -175,4 +180,47 @@[m [mdef page_not_found(e):[m
 [m
 @app.route('/fetchUrl')[m
 def fetch_url():[m
[31m-    return json.dumps({'success' : 1, 'link':request.args.get('url'), "meta":{}}), 200, {'ContentType':'application/json'} [m
\ No newline at end of file[m
[32m+[m[32m    return json.dumps({'success' : 1, 'link':request.args.get('url'), "meta":{}}), 200, {'ContentType':'application/json'}[m
[32m+[m
[32m+[m[32m@app.route('/api/getItemTypes')[m
[32m+[m[32m@checkAllowance(3)[m
[32m+[m[32mdef get_item_types():[m
[32m+[m[32m    return db.execute('SELECT * FROM item_types')[m[41m [m
[32m+[m
[32m+[m[32m@app.route('/api/getItemSubtypes')[m
[32m+[m[32m@checkAllowance(3)[m
[32m+[m[32mdef get_item_subtypes():[m
[32m+[m[32m    if not request.args.get('item_type'):[m
[32m+[m[32m        return {}[m
[32m+[m[32m    else:[m
[32m+[m[32m        return db.execute('SELECT * FROM item_subtype WHERE item_type_id = ?', request.args.get('item_type'))[m[41m [m
[32m+[m
[32m+[m[32m@app.route('/api/getStatusTypes')[m
[32m+[m[32m@checkAllowance(3)[m
[32m+[m[32mdef get_status_types():[m
[32m+[m[32m    return db.execute('SELECT * FROM status_types')[m
[32m+[m
[32m+[m[32m@app.route('/api/getFieldsItemType')[m
[32m+[m[32m@checkAllowance(3)[m
[32m+[m[32mdef get_fields_item_type():[m
[32m+[m[32m    if not request.args.get('id'):[m
[32m+[m[32m        return {}[m
[32m+[m[32m    else:[m
[32m+[m[32m        db_response = db.execute('SELECT * FROM item_types WHERE id = ?', request.args.get('id'))[m
[32m+[m[32m        if len(db_response) == 0 or len(db_response) > 1:[m
[32m+[m[32m            return {}[m
[32m+[m[32m        elif db_response[0]['name'] == 'arma':[m
[32m+[m[32m            return {'fields':[[m
[32m+[m[32m                {'name':'weapon_attack_power', 'placeholder':'Poder de Ataque'},[m
[32m+[m[32m                {'name':'weapon_precision', 'placeholder':'PrecisÃ£o'},[m
[32m+[m[32m                {'name':'weapon_attack_speed', 'placeholder':'Velocidade de Ataque'},[m
[32m+[m[32m                {'name':'weapon_attack_range', 'placeholder':'DistÃ¢ncia de Ataque'},[m
[32m+[m[32m                {'name':'weapon_status1_type', 'placeholder':'Selecione um Tipo de Status'},[m
[32m+[m[32m                {'name':'weapon_status1_value', 'placeholder':'Valor do Status'},[m
[32m+[m[32m                {'name':'weapon_status2_type', 'placeholder':'Selecione um Tipo de Status'},[m
[32m+[m[32m                {'name':'weapon_status2_value', 'placeholder':'Valor do Status'},[m
[32m+[m[32m                {'name':'weapon_status3_type', 'placeholder':'Selecione um Tipo de Status'},[m
[32m+[m[32m                {'name':'weapon_status3_value', 'placeholder':'Valor do Status'}[m
[32m+[m[32m            ]}[m
[32m+[m[32m        else:[m
[32m+[m[32m            return {}[m
\ No newline at end of file[m
[1mdiff --git a/database/deinit.sql b/database/deinit.sql[m
[1mindex 686ea33..b308091 100644[m
[1m--- a/database/deinit.sql[m
[1m+++ b/database/deinit.sql[m
[36m@@ -1,5 +1,7 @@[m
 DROP TABLE pages;[m
[32m+[m[32mDROP TABLE npcs;[m
 DROP TABLE quests;[m
[32m+[m[32mDROP TABLE cities;[m
 DROP TABLE planets;[m
 DROP TABLE gem_data;[m
 DROP TABLE consumable_data;[m
[1mdiff --git a/database/init.sql b/database/init.sql[m
[1mindex 8420ebe..3f2ad1a 100644[m
[1m--- a/database/init.sql[m
[1m+++ b/database/init.sql[m
[36m@@ -141,7 +141,7 @@[m [mCREATE TABLE weapons_data([m
     subtype_id INTEGER DEFAULT NULL,[m
     name VARCHAR(70) NOT NULL,[m
     attack_power REAL NOT NULL,[m
[31m-    wpn_precision REAL NOT NULL,[m
[32m+[m[32m    accuracy REAL NOT NULL,[m
     attack_speed REAL NOT NULL,[m
     attack_range REAL NOT NULL,[m
     status1_id INTEGER DEFAULT NULL,[m
[36m@@ -304,15 +304,49 @@[m [mSET @skaaj_id = LAST_INSERT_ID();[m
 INSERT INTO planets(name) VALUES('Hebarn');[m
 SET @hebarn_id = LAST_INSERT_ID();[m
 [m
[32m+[m[32mCREATE TABLE cities([m
[32m+[m[32m    id INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,[m
[32m+[m[32m    name VARCHAR(100) NOT NULL,[m
[32m+[m[32m    planet_id INTEGER NOT NULL,[m
[32m+[m
[32m+[m[32m    FOREIGN KEY (planet_id) REFERENCES planets(id)[m
[32m+[m[32m);[m
[32m+[m
[32m+[m[32mINSERT INTO cities(name, planet_id) VALUES('City of Junon Polis', @junon_id);[m
[32m+[m[32mINSERT INTO cities(name, planet_id) VALUES('Adventure Plains', @junon_id);[m
[32m+[m[32mINSERT INTO cities(name, planet_id) VALUES('Breezy Hills', @junon_id);[m
[32m+[m[32mINSERT INTO cities(name, planet_id) VALUES('El Verloon Desert', @junon_id);[m
[32m+[m[32mINSERT INTO cities(name, planet_id) VALUES('Valley of Luxem Tower', @junon_id);[m
[32m+[m[32mINSERT INTO cities(name, planet_id) VALUES('Anima Lake', @junon_id);[m
[32m+[m[32mINSERT INTO cities(name, planet_id) VALUES('Forest of Wisdom', @junon_id);[m
[32m+[m[32mINSERT INTO cities(name, planet_id) VALUES('Desert of the Dead', @junon_id);[m
[32m+[m[32mINSERT INTO cities(name, planet_id) VALUES('Gorge of Silence', @junon_id);[m
[32m+[m[32mINSERT INTO cities(name, planet_id) VALUES('Goblin Cave', @junon_id);[m
[32m+[m[32mINSERT INTO cities(name, planet_id) VALUES('Kenji Beach', @junon_id);[m
[32m+[m
[32m+[m[32mINSERT INTO cities(name, planet_id) VALUES('Magic City of Eucar', @luna_id);[m
[32m+[m[32mINSERT INTO cities(name, planet_id) VALUES('Freezing Plateau', @junon_id);[m
[32m+[m
 CREATE TABLE quests([m
     id INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,[m
     name VARCHAR(100) NOT NULL,[m
     planet_id INTEGER DEFAULT NULL,[m
     city_id INTEGER DEFAULT NULL,[m
 [m
[31m-    FOREIGN KEY (planet_id) REFERENCES planets(id)[m
[32m+[m[32m    FOREIGN KEY (planet_id) REFERENCES planets(id),[m
[32m+[m[32m    FOREIGN KEY (city_id) REFERENCES cities(id)[m
 );[m
 [m
[32m+[m[32mCREATE TABLE npcs([m
[32m+[m[32m    id INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,[m
[32m+[m[32m    name VARCHAR(100) NOT NULL,[m
[32m+[m[32m    planet_id INTEGER DEFAULT NULL,[m
[32m+[m[32m    city_id INTEGER DEFAULT NULL,[m
[32m+[m
[32m+[m[32m    FOREIGN KEY (planet_id) REFERENCES planets(id),[m
[32m+[m[32m    FOREIGN KEY (city_id) REFERENCES cities(id)[m
[32m+[m[32m);[m[41m [m
[32m+[m
 CREATE TABLE pages([m
     id INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,[m
     page_type INTEGER NOT NULL,[m
[1mdiff --git a/static/newPage.js b/static/newPage.js[m
[1mindex a1d1c67..94f0b5b 100644[m
[1m--- a/static/newPage.js[m
[1m+++ b/static/newPage.js[m
[36m@@ -19,6 +19,13 @@[m [mdocument.addEventListener('DOMContentLoaded', function(){[m
     let editorQuest = undefined;[m
     let editorItem = undefined;[m
 [m
[32m+[m[32m    /* To Do:[m
[32m+[m[32m        Build Up Items/NPC and Guide Forms and Database.[m
[32m+[m[32m        Build Up AJAX Fetch for inserting pages into db.[m
[32m+[m[32m        Searching pages.[m
[32m+[m
[32m+[m[32m    */[m
[32m+[m
     guiaButton.addEventListener('click', function(){[m
         questSection.classList.remove('block');[m
         npcSection.classList.remove('block');[m
[36m@@ -684,6 +691,51 @@[m [mdocument.addEventListener('DOMContentLoaded', function(){[m
             });[m
         }[m
 [m
[32m+[m[32m        selectItemTypes = document.querySelector('#item_types')[m
[32m+[m[32m        fetch('/api/getItemTypes').then((response) => response.json()).then((data) => {[m
[32m+[m[32m            for(let item of data){[m
[32m+[m[32m                let opt = document.createElement('option');[m
[32m+[m[32m                opt.value = item.id;[m
[32m+[m[32m                opt.innerHTML = item.name;[m
[32m+[m[32m                opt.classList.add('capitalize');[m
[32m+[m[32m                selectItemTypes.appendChild(opt);[m
[32m+[m[32m            }[m
[32m+[m[32m        });[m
[32m+[m
[32m+[m[32m        selectItemSubtypes = document.querySelector('#item_subtypes');[m
[32m+[m[32m        selectItemTypes.addEventListener('change', () => {[m
[32m+[m[32m            /* Lembrar de retirar itens dos inputs que vem depois desse em caso de mudanÃ§a. */[m
[32m+[m[32m            fetch('/api/getItemSubtypes?item_type='+selectItemTypes.value).then((response) => response.json()).then((data) =>{[m
[32m+[m[32m                selectItemSubtypes.innerHTML = ''[m
[32m+[m[32m                for(let item of data){[m
[32m+[m[32m                    let opt = document.createElement('option');[m
[32m+[m[32m                    opt.value = item.id;[m
[32m+[m[32m                    opt.innerHTML = item.name;[m
[32m+[m[32m                    opt.classList.add('capitalize');[m
[32m+[m[32m                    selectItemSubtypes.appendChild(opt);[m
[32m+[m[32m                }[m[41m [m
[32m+[m[32m            });[m
[32m+[m[32m        });[m
[32m+[m
[32m+[m[32m        selectItemTypes.addEventListener('change', async function() {[m
[32m+[m[32m            async function getStatus(){[m
[32m+[m[32m                const respons = await fetch('/api/getStatusTypes');[m
[32m+[m[32m                let jsonObj = await respons.json();[m
[32m+[m
[32m+[m[32m                return jsonObj;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            async function getFields(id){[m
[32m+[m[32m                const respons = await fetch('/api/getFieldsItemType?id='+id);[m
[32m+[m[32m                let jsonObj = await respons.json();[m
[32m+[m
[32m+[m[32m                return jsonObj;[m[41m [m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            let fields = await getFields(selectItemTypes.value);[m
[32m+[m[32m            alert(JSON.stringify(fields))[m
[32m+[m[32m        });[m
[32m+[m
     });[m
 });[m
 [m
